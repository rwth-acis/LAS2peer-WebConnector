<project name="las2peer-web-connector" default="jar" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
	
	<property environment="env"/>

	<property name="ivy.organisation" value="i5" />
	<property name="ivy.module" value="las2peer-web-connector" />
	<property name="ivy.revision" value="0.6" />
	<property name="ivy.build.number" value="4" />
	<property name="ivy.deliver.revision" value="${ivy.revision}" />
	<property name="ivy.pom.version" value="${ivy.revision}" />
	
	<condition property="ivy.las2peer.version" value="${ivy.revision}.${ivy.build.number}" else="${ivy.revision}-SNAPSHOT">
		<isset property="env.LAS2PEER_RELEASE" />
	</condition>

	<property name="ivy.install.version" value="2.4.0" />
	<property name="ivy.jar.dir" value="${basedir}/etc/ivy" />
	<property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />
	<property name="ivy.settings.file" value="${ivy.jar.dir}/ivysettings.xml" />
	<property name="ivy.dep.file" value="${ivy.jar.dir}/ivy.xml" />

	<property name="src.main" location="src/main/java" />
	<property name="src.junit" location="src/test/java" />

	<property name="tmp" location="tmp" />

	<property name="tmp.classes" location="${tmp}/classes" />
	<property name="tmp.junit" location="${tmp}/test" />

	<property name="junit.report" location="${tmp}/test_reports" />

	<property name="export" location="export" />
	<property name="export.jars" location="${export}/jars" />
	<property name="export.doc" location="${export}/javadoc" />

	<property name="lib" value="lib" />

	<path id="libraries">
		<fileset dir="${basedir}/">
			<include name="${lib}/*.jar" />
			<exclude name="${lib}/junit-*.jar" />
			<exclude name="${lib}/hamcrest-*.jar" />
		</fileset>
	</path>

	<property name="lib.junit" location="${lib}/junit-4.12.jar:${lib}/hamcrest-core-1.3.jar" />


	<!-- Download Dependencies (IVY) -->

	<target name="download-ivy" unless="skip.download">
		<echo message="installing ivy..." />
        <get src="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
            dest="${ivy.jar.file}" usetimestamp="true" />
	</target>

	<target name="install-ivy" depends="download-ivy">
		<path id="ivy.lib.path">
			<fileset dir="${ivy.jar.dir}" includes="*.jar" />
		</path>
		<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path" />
	</target>

	<target name="get_deps" depends="install-ivy" description="--> resolve dependencies">
		<ivy:settings>
			<credentials host="role.dbis.rwth-aachen.de:9911/archiva" realm="Repository internal" />
		</ivy:settings>
		<ivy:retrieve type="jar, bundle" />
	</target>

	<target name="deploy-snapshot" depends="jar" description="--> deploy snapshot">

		<property name="sn" value="${ivy.deliver.revision}-SNAPSHOT" />
		<local name="ivy.deliver.revision" />
		<property name="ivy.deliver.revision" value="${sn}" />
		<local name="ivy.pom.version" />
		<property name="ivy.pom.version" value="${sn}" />

		<ivy:makepom 
			ivyfile="${ivy.dep.file}" 
			pomfile="${export}/jars/${ivy.module}.pom" 
			artifactName="${ivy.module}"
			artifactPackaging="jar"
		/>

		<ivy:publish resolver="acis-snapshots"
			publishivy="false"
			overwrite="true"
			forcedeliver="true"
			status="integration">
			<artifacts pattern="${export}/jars/${ivy.module}.[ext]" />
		</ivy:publish>

	</target>

	<target name="deploy-release" depends="jar, junit" description="--> deploy release">

		<property name="sn" value="${ivy.deliver.revision}.${ivy.build.number}" />
		<local name="ivy.deliver.revision" />
		<property name="ivy.deliver.revision" value="${sn}" />
		<local name="ivy.pom.version" />
		<property name="ivy.pom.version" value="${sn}" />

		<ivy:makepom 
			ivyfile="${ivy.dep.file}" 
			pomfile="${export}/jars/${ivy.module}.pom" 
			artifactName="${ivy.module}"
			artifactPackaging="jar"
		/>

		<ivy:publish resolver="acis-internal"
			publishivy="false"
			overwrite="true"
			forcedeliver="true"
			status="release">
			<artifacts pattern="${export}/jars/${ivy.module}.[ext]" />
		</ivy:publish>

	</target>


	<!-- Initialization -->

	<target name="init_general">
		<tstamp />
		<mkdir dir="${tmp}" />
		<mkdir dir="${export}" />
	</target>

	<target name="init_compile" depends="init_general, get_deps">
		<mkdir dir="${tmp.classes}" />
		<mkdir dir="${tmp.junit}" />
	</target>

	<target name="init_jars" depends="init_general">
		<mkdir dir="${export.jars}" />
	</target>

	<target name="init_doc" depends="init_general">
		<mkdir dir="${export.doc}" />
	</target>


	<!-- Compilation -->

	<target name="compile_main" depends="init_compile">
		<javac srcdir="${src.main}"
            destdir="${tmp.classes}"
            classpathref="libraries"
            debug="on"
            encoding="UTF-8"
			includeantruntime="false"
		/>
		<copy todir="${tmp.classes}">
			<fileset dir="${src.main}">
				<include name="**/*.xml" />
			</fileset>
		</copy>
	</target>

	<target name="compile_junit" depends="init_compile, compile_main">
		<javac srcdir="${src.junit}"
            destdir="${tmp.junit}"
            classpath="${tmp.classes}:${lib.junit}"
            classpathref="libraries"
            debug="on"
            encoding="UTF-8"
			includeantruntime="false"
		/>
		<copy todir="${tmp.junit}">
			<fileset dir="${src.junit}">
				<include name="**/*.xml" />
			</fileset>
		</copy>
	</target>

	<target name="compile_all" depends="compile_main, compile_junit" />

	<target name="jar" depends="compile_all">
		<!-- constructs the external libraries classpath name -->
		<pathconvert property="classpath.name" pathsep=" ">
			<path refid="libraries" />
			<mapper>
				<chainedmapper>
					<flattenmapper />
				</chainedmapper>
			</mapper>
		</pathconvert>
		<jar jarfile="${export.jars}/${ivy.module}.jar">
			<fileset dir="${tmp.classes}">
			</fileset>
			<manifest>
				<attribute name="Class-Path" value="${classpath.name}" />
			</manifest>
		</jar>
	</target>

	<target name="javadoc" depends="init_doc" description="--> generate Javadoc for this project" >
		<javadoc destdir="${export.doc}"
			author="true"
			version="true"
			use="true"
			windowtitle="LAS2peer Web-Connector Documentation"
			failonerror="yes"
            encoding="utf-8"
            classpath="${tmp.classes}"
            classpathref="libraries"
         >
			<packageset dir="${src.main}" defaultexcludes="yes">
				<include name="i5/las2peer/**" />
			</packageset>
		</javadoc>
	</target>

	<!-- Junit Testing -->

	<target name="junit" depends="junit_tests, junit_clean" description="--> run all Junit tests for this project" />

	<target name="init_junit" depends="init_general">
		<mkdir dir="${junit.report}" />
	</target>

	<target name="junit_clean">
		<delete dir="${tmp.junit}" />
	</target>

	<target name="junit_tests" depends="init_junit, compile_all">
		<junit fork="yes" haltonerror="yes" haltonfailure="yes" printsummary="yes">
			<classpath>
				<pathelement path="${tmp.classes}" />
				<pathelement path="${tmp.junit}" />
				<pathelement path="${lib.junit}" />
				<path refid="libraries" />
			</classpath>
			<formatter type="plain" usefile="false" />
			<formatter type="plain" />
			<batchtest fork="yes" todir="${junit.report}">
				<fileset dir="${tmp.junit}">
					<include name="**/*Test.class" />
				</fileset>
			</batchtest>
		</junit>
	</target>


	<!-- Cleanup -->

	<target name="clean" description="--> clean">
		<delete dir="${tmp}" />
		<delete dir="${export}" />
		<delete dir="${lib}" />
	</target>


	<target name="all" depends="clean, jar, junit, javadoc" description="--> all" />

</project>
